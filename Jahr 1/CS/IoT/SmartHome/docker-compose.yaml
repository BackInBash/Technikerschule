version: '3'
services:
    reverse-proxy:
        # The official v2 Traefik docker image
        image: traefik:v2.4
        container_name: iot_proxy
        # Enables the web UI and tells Traefik to listen to docker
        command: 
            - --api.insecure=true
            - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
            - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
            - --log.level=DEBUG # <== Setting the level of the logs from traefik
            - --providers.docker=true # <== Enabling docker as the provider for traefik
            - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
        ports:
            # The HTTP port
            - "80:80"
            # The Web UI (enabled by --api.insecure=true)
            - "8080:8080"
        volumes:
            # So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock
        restart: always
        labels:
            - "traefik.frontend.headers.STSPreload=true"
            - "traefik.frontend.passHostHeader=true"
        networks:
            - default
            - iot_internal
    # Node RED
    node-red:
        # A container that exposes an API to show its IP address
        image: nodered/node-red:latest-12
        container_name: iot_node-red
        user: root:root
        volumes: 
          - ./node-red:/data
        restart: always
        networks:
            - iot_internal
        labels:
            - "traefik.enable=true"
            - "traefik.backend=iot_node-red"
            - "traefik.docker.network=iot_internal"
            - "traefik.frontend.rule=Host:node-red && PathPrefix(`/node-red`)"
            - "traefik.http.routers.iot_node-red.rule=PathPrefix(`/node-red`)"
            - "traefik.http.routers.iot_node-red.middlewares=iot_node-red-stripprefix"
            - "traefik.http.routers.iot_node-red.middlewares=iot_node-red-auth"
            - "traefik.http.middlewares.iot_node-red-stripprefix.stripprefix.prefixes=/node-red"
            - "traefik.http.middlewares.iot_node-red-auth.basicauth.users=iot:test123"
    # Mosquitto MQTT Broker      
    mosquitto:
        image: eclipse-mosquitto:latest
        container_name: iot_mosquitto
        ports:
            - 1883:1883
            - 9001:9001
        volumes: 
            - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
            - ./mosquitto/data:/mosquitto/data
            - ./mosquitto/log:/mosquitto/log
        restart: always
    # Grafana Server
    grafana:
        image: grafana/grafana:latest
        container_name: iot_grafana
        restart: always
        volumes:
            - ./grafana:/var/lib/grafana
        environment:
          - GF_SECURITY_ADMIN_PASSWORD=test123
          - GF_USERS_ALLOW_SIGN_UP=false
          - GF_SERVER_DOMAIN=/grafana/
          - GF_SERVER_ROOT_URL=/grafana/
        labels:
            - "traefik.enable=true"
            - "traefik.backend=iot_grafana"
            - "traefik.docker.network=iot_internal"
            - "traefik.frontend.rule=Host:grafana && PathPrefix(`/grafana`)"
            - "traefik.http.routers.iot_grafana.rule=PathPrefix(`/grafana`)"
            - "traefik.http.routers.iot_grafana.middlewares=iot_grafana-stripprefix"
            - "traefik.http.middlewares.iot_grafana-stripprefix.stripprefix.prefixes=/grafana"
        networks: 
            - iot_internal
    # Influx Database
    influxdb:
        image: influxdb:latest
        container_name: iot_influxdb
        restart: always
        ports: 
            - 8086:8086
        user: root:root
        volumes:
            - ./influxdb:/var/lib/influxdb
        environment:
            - INFLUXDB_DB=db0
            - INFLUXDB_ADMIN_USER=adming
            # Min 8. Character
            - INFLUXDB_ADMIN_PASSWORD=12345678
        networks: 
            - iot_internal
networks:
    iot_internal:
      driver: bridge